generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                 Int                  @id @default(autoincrement())
  name               String
  createdAt          DateTime             @default(now()) @db.Timestamp(6)
  updatedAt          DateTime             @default(now()) @db.Timestamp(6)
  isActive           Boolean              @default(false)
  isOver             Boolean              @default(false)
  minPoints          Int                  @default(1)
  maxPoints          Int                  @default(1)
  type               EventType            @default(ONCE_SCAN)
  EventModerators    EventModerator[]
  EventParticipants  EventParticipation[]
}

model EventParticipation {
  id             Int                      @id @default(autoincrement())
  eventId        Int
  participantId  String?
  moderatorId    String
  pointsAssigned Int
  hash           String                   @unique
  status         EventParticipationStatus
  createdAt      DateTime                 @default(now()) @db.Timestamp(6)
  updatedAt      DateTime                 @default(now()) @db.Timestamp(6)
  Event          Event                    @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_event_participation__event")
  Moderator      User                     @relation("EventParticipation_moderatorIdToUser", fields: [moderatorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_event_participation__moderator")
  Participant    User?                    @relation("EventParticipation_participantIdToUser", fields: [participantId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_event_participation__participant")
}

model Role {
  codename  String   @id
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  User      User[]
}

model SchemaVersion {
  version BigInt    @id
  name    String?
  md5     String?
  run_at  DateTime? @db.Timestamptz(6)
}

model User {
  id                                                        String               @id
  email                                                     String?              @unique
  firstName                                                 String
  lastName                                                  String
  roleCodename                                              String
  lastLoginTime                                             DateTime?            @db.Timestamp(6)
  lastScannedQrTime                                         DateTime?            @db.Timestamp(6)
  eventsScanned                                             Int                  @default(0)
  createdAt                                                 DateTime             @default(now()) @db.Timestamp(6)
  updatedAt                                                 DateTime             @default(now()) @db.Timestamp(6)
  Role                                                      Role                 @relation(fields: [roleCodename], references: [codename], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_role")
  EventModerator                                            EventModerator[]
  EventParticipation_EventParticipation_moderatorIdToUser   EventParticipation[] @relation("EventParticipation_moderatorIdToUser")
  EventParticipation_EventParticipation_participantIdToUser EventParticipation[] @relation("EventParticipation_participantIdToUser")
}

model EventModerator {
  id          Int      @id @default(autoincrement())
  moderatorId String
  eventId     Int
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @db.Timestamp(6)
  Event       Event    @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eventadmin_event")
  Moderator   User     @relation(fields: [moderatorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_eventadmin_user")
}

enum EventParticipationStatus {
  PENDING
  CANCELLED
  SCANNED
  SCAN_ACCEPTED
}

enum EventType {
  ONCE_SCAN
  MULTIPLE_SCAN
}
